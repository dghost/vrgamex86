/*
 * Copyright (C) 1997-2001 Id Software, Inc.
 * Copyright (C) 2011 Yamagi Burmeister
 * Copyright (C) 2014 Luke Groeninger
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 * =======================================================================
 *
 * Prototypes for every function in the game.so.
 *
 * =======================================================================
 */

char *CTFOtherTeamName(int team);
char *CTFOtherTeamName2(int team);
char *CTFTeamName(int team);
char *ClientTeam(edict_t *ent);
char *ED_NewString(char *string);
char *ED_ParseEdict(char *data,edict_t *ent);
char *G_CopyString(const char *in);
char *vtos(vec3_t v);
edict_t *ACESP_FindFreeClient(void);
edict_t *CrateOnTop(edict_t *from,edict_t *ent);
edict_t *CreateTargetChangeLevel(char *map);
edict_t *Drop_Item(edict_t *ent,gitem_t *item);
edict_t *FindTechSpawn(void);
edict_t *G_Find(edict_t *from,int fieldofs,char *match);
edict_t *G_FindNextCamera(edict_t *camera,edict_t *monitor);
edict_t *G_FindPrevCamera(edict_t *camera,edict_t *monitor);
edict_t *G_PickDestination (char *targetname);
edict_t *G_PickTarget(char *targetname);
edict_t *G_Spawn(void);
edict_t *LookingAt(edict_t *ent,int filter,vec3_t endpos,float *range);
edict_t *NextPathTrack(edict_t *train,edict_t *path);
edict_t *PlayerTrail_LastSpot(void);
edict_t *PlayerTrail_PickFirst(edict_t *self);
edict_t *PlayerTrail_PickNext(edict_t *self);
edict_t *SV_TestEntityPosition(edict_t *ent);
edict_t *SelectCTFSpawnPoint(edict_t *ent);
edict_t *SelectCoopSpawnPoint(edict_t *ent);
edict_t *SelectDeathmatchSpawnPoint(void);
edict_t *SelectFarthestDeathmatchSpawnPoint(void);
edict_t *SelectRandomDeathmatchSpawnPoint(void);
edict_t *SpawnThing(void);
edict_t *TurretTarget(edict_t *self);
edict_t *findradius(edict_t *from,vec3_t org,float rad);
edict_t *medic_FindDeadMonster(edict_t *self);
edict_t *rocket_target(edict_t *self,vec3_t start,vec3_t forward);
float *tv(float x,float y,float z);
float ACEIT_ItemNeed(edict_t *self,int item);
float AtLeast(float x,float dx);
float PM_CmdScale(usercmd_t *cmd);
float PlayersRangeFromSpot(edict_t *spot);
float RiderMass(edict_t *platform);
float SV_CalcRoll(vec3_t angles,vec3_t velocity);
float SnapToEights(float x);
float UTIL_AngleDistance(float next,float cur);
float UTIL_AngleMod(float a);
float UTIL_ApproachAngle(float target,float value,float speed);
float realrange(edict_t *this_one,edict_t *that);
float vectoyaw(vec3_t vec);
float vectoyaw2(vec3_t vec);
float weight_on_top(edict_t *ent);
gitem_t *CTFWhat_Flag(edict_t *ent);
gitem_t *CTFWhat_Tech(edict_t *ent);
gitem_t *FindItem(char *pickup_name);
gitem_t *FindItemByClassname(char *classname);
gitem_t *GetItemByIndex(int index);
int ACEIT_ClassnameToIndex(char *classname);
int ACEND_AddNode(edict_t *self,int type);
int ACEND_FindCloseReachableNode(edict_t *self,int range,int type);
int ACEND_FindClosestReachableNode(edict_t *self,int range,int type);
int ACEND_FindCost(int from,int to);
int ArmorIndex(edict_t *ent);
int BloodType(int index);
int CTFApplyResistance(edict_t *ent,int dmg);
int CTFApplyStrength(edict_t *ent,int dmg);
int CTFFlagTeam(gitem_t *flag);
int CTFOtherTeam(int team);
int CTFOtherTeam2(int team);
int CTFUpdateJoinMenu(edict_t *ent);
int CheckArmor (edict_t *ent, vec3_t point, vec3_t normal, int damage, int te_sparks, int dflags);
int CheckPowerArmor (edict_t *ent, vec3_t point, vec3_t normal, int damage, int dflags);
int ClipVelocity(vec3_t in,vec3_t normal,vec3_t out,float overbounce);
int Debug_Modelindex(char *name);
int Debug_Soundindex(char *name);
int Decode(char *filename,uint8_t *buffer,int bufsize);
int Encode(char *filename,uint8_t *buffer,int bufsize,int version);
int HintTestStart(edict_t *self);
int NumOfTech(int index);
int PatchDeadSoldier(void);
int PatchMonsterModel(char *modelname);
int PatchPlayerModels(char *modelname);
int PlayerSort(void const *a,void const *b);
int PlayersOnCTFTeam(int checkteam);
int PowerArmorType(edict_t *ent);
int SV_FlyMove(edict_t *ent,float time,int mask);
int SV_PushableMove(edict_t *ent,float time,int mask);
int SV_VehicleMove(edict_t *ent,float time,int mask);
int TTCTFUpdateJoinMenu(edict_t *ent);
int TechCount(void);
int listSize(char *list[]);
int range(edict_t *self,edict_t *other);
int trigger_transition_ents(edict_t *changelevel,edict_t *self);
pmenuhnd_t *PMenu_Open(edict_t *ent,pmenu_t *entries,int cur,int num,void *arg);
qboolean ACEAI_CheckShot(edict_t *self);
qboolean ACEAI_FindEnemy(edict_t *self);
qboolean ACECM_Commands(edict_t *ent);
qboolean ACEIT_CanUseArmor(gitem_t *item,edict_t *other);
qboolean ACEIT_ChangeWeapon(edict_t *ent,gitem_t *item);
qboolean ACEIT_IsReachable(edict_t *self,vec3_t goal);
qboolean ACEIT_IsVisible(edict_t *self,vec3_t goal);
qboolean ACEMV_CanMove(edict_t *self,int direction);
qboolean ACEMV_CheckEyes(edict_t *self,usercmd_t *ucmd);
qboolean ACEMV_SpecialMove(edict_t *self,usercmd_t *ucmd);
qboolean ACEND_CheckForLadder(edict_t *self);
qboolean ACEND_FollowPath(edict_t *self);
qboolean Add_Ammo(edict_t *ent,gitem_t *item,int count);
qboolean AimGrenade(edict_t *self,vec3_t start,vec3_t target,vec_t speed,vec3_t aim);
qboolean Boss2_CheckAttack(edict_t *self);
qboolean CTFApplyHaste(edict_t *ent);
qboolean CTFApplyStrengthSound(edict_t *ent);
qboolean CTFCheckRules(void);
qboolean CTFDrop_Flag(edict_t *ent,gitem_t *item);
qboolean CTFHasRegeneration(edict_t *ent);
qboolean CTFInMatch(void);
qboolean CTFMatchOn(void);
qboolean CTFMatchSetup(void);
qboolean CTFNextMap(void);
qboolean CTFPickup_Flag(edict_t *ent,edict_t *other);
qboolean CTFPickup_Tech(edict_t *ent,edict_t *other);
qboolean CTFStartClient(edict_t *ent);
qboolean CanDamage(edict_t *targ,edict_t *inflictor);
qboolean CheckFlood(edict_t *ent);
qboolean CheckTeamDamage(edict_t *targ,edict_t *attacker);
qboolean ClientConnect(edict_t *ent,char *userinfo);
qboolean Crane_Hook_Bonk(edict_t *hook,int axis,int dir,vec3_t bonk);
qboolean ED_ParseEntityAlias(char *data,edict_t *ent);
qboolean FacingIdeal(edict_t *self);
qboolean FindTarget(edict_t *self);
qboolean HasSpawnFunction(edict_t *ent);
qboolean InPak(const char *basedir,const char *gamedir,const char *filename);
qboolean IsFemale(edict_t *ent);
qboolean IsIdMap(void);
qboolean IsNeutral(edict_t *ent);
qboolean Jet_AvoidGround(edict_t *ent);
qboolean Jorg_CheckAttack(edict_t *self);
qboolean KillBox(edict_t *ent);
qboolean M_CheckAttack(edict_t *self);
qboolean M_CheckBottom(edict_t *ent);
qboolean M_SetDeath(edict_t *self,mmove_t **deathmoves);
qboolean M_walkmove(edict_t *ent,float yaw,float dist);
qboolean Makron_CheckAttack(edict_t *self);
qboolean OnSameTeam(edict_t *ent1,edict_t *ent2);
qboolean Pickup_Adrenaline(edict_t *ent,edict_t *other);
qboolean Pickup_Ammo(edict_t *ent,edict_t *other);
qboolean Pickup_AmmogenPack(edict_t *ent,edict_t *other);
qboolean Pickup_AncientHead(edict_t *ent,edict_t *other);
qboolean Pickup_Armor(edict_t *ent,edict_t *other);
qboolean Pickup_Bandolier(edict_t *ent,edict_t *other);
qboolean Pickup_Health(edict_t *ent,edict_t *other);
qboolean Pickup_Key(edict_t *ent,edict_t *other);
qboolean Pickup_Pack(edict_t *ent,edict_t *other);
qboolean Pickup_PowerArmor(edict_t *ent,edict_t *other);
qboolean Pickup_Powerup(edict_t *ent,edict_t *other);
qboolean Pickup_Weapon(edict_t *ent,edict_t *other);
qboolean PlayerOnFloor(edict_t *player);
qboolean SV_CloseEnough(edict_t *ent,edict_t *goal,float dist);
int SV_FilterPacket(char *from);
qboolean SV_Push(edict_t *pusher,vec3_t move,vec3_t amove);
qboolean SV_RunThink(edict_t *ent);
qboolean SV_StepDirection(edict_t *ent,float yaw,float dist);
qboolean SV_movestep(edict_t *ent,vec3_t move,qboolean relink);
qboolean actor_blocked(edict_t *self,float dist);
qboolean actor_checkattack(edict_t *self);
qboolean ai_checkattack(edict_t *self,float dist);
qboolean ai_chicken(edict_t *self,edict_t *badguy);
qboolean box_movestep(edict_t *ent,vec3_t move,qboolean relink);
qboolean box_walkmove(edict_t *ent,float yaw,float dist);
qboolean canReach(edict_t *self,edict_t *other);
qboolean check_jump_blocked(edict_t *monster,float jumpDist,float downLimit,float upLimit);
qboolean check_plat_blocked(edict_t *monster,float moveDist);
qboolean check_shot_blocked(edict_t *monster,float chance_attack);
qboolean embedded(edict_t *ent);
qboolean face_wall(edict_t *self);
qboolean fire_hit(edict_t *self,vec3_t aim,int damage,int kick);
qboolean gladiator_blocked(edict_t *self,float range);
qboolean gunner_grenade_check(edict_t *self);
qboolean has_valid_enemy(edict_t *self);
qboolean hintcheck_monsterlost(edict_t *monster);
qboolean infront(edict_t *self,edict_t *other);
qboolean is_backing_up(edict_t *train);
qboolean medic_checkattack(edict_t *self);
qboolean monster_start(edict_t *self);
qboolean mutant_check_jump(edict_t *self);
qboolean mutant_check_melee(edict_t *self);
qboolean mutant_checkattack(edict_t *self);
qboolean parasite_blocked(edict_t *self,float range);
qboolean parasite_drain_attack_ok(vec3_t start,vec3_t end);
qboolean point_infront(edict_t *self,vec3_t point);
qboolean visible(edict_t *self,edict_t *other);
trace_t PM_trace(vec3_t start,vec3_t mins,vec3_t maxs,vec3_t end);
trace_t SV_DebrisEntity(edict_t *ent,vec3_t push);
trace_t SV_PushEntity(edict_t *ent,vec3_t push);
uint32_t CheckBlock(void *b,int c);
void ACEAI_ChooseWeapon(edict_t *self);
void ACEAI_PickLongRangeGoal(edict_t *self);
void ACEAI_PickShortRangeGoal(edict_t *self);
void ACEAI_Think(edict_t *self);
void ACECM_Store(void);
void ACEIT_BuildItemNodeTable(qboolean rebuild);
void ACEIT_PlayerAdded(edict_t *ent);
void ACEIT_PlayerRemoved(edict_t *ent);
void ACEMV_Attack(edict_t *self,usercmd_t *ucmd);
void ACEMV_ChangeBotAngle(edict_t *ent);
void ACEMV_Move(edict_t *self,usercmd_t *ucmd);
void ACEMV_MoveToGoal(edict_t *self,usercmd_t *ucmd);
void ACEMV_Wander(edict_t *self,usercmd_t *ucmd);
void ACEND_DrawPath(void);
void ACEND_GrapFired(edict_t *self);
void ACEND_InitNodes(void);
void ACEND_LoadNodes(void);
void ACEND_PathMap(edict_t *self);
void ACEND_RemoveNodeEdge(edict_t *self,int from,int to);
void ACEND_ResolveAllPaths(void);
void ACEND_SaveNodes(void);
void ACEND_SetGoal(edict_t *self,int goal_node);
void ACEND_ShowNode(int node);
void ACEND_ShowPath(edict_t *self,int goal_node);
void ACEND_UpdateNodeEdge(int from,int to);
void ACESP_HoldSpawn(edict_t *self);
void ACESP_LoadBotInfo(void);
void ACESP_PutClientInServer(edict_t *bot,qboolean respawn,int team);
void ACESP_RemoveBot(char *name);
void ACESP_Respawn(edict_t *self);
void ACESP_SetName(edict_t *bot,char *name,char *skin,char *team);
void ACESP_SpawnBot(char *team,char *name,char *skin,char *userinfo);
void AI_SetSightClient(void);
void ActorTarget(edict_t *self,vec3_t target);
void AddReflection(edict_t *ent);
void AngleMove_Begin(edict_t *ent);
void AngleMove_Calc(edict_t *ent,void(*func)(edict_t *));
void AngleMove_Done(edict_t *ent);
void AngleMove_Final(edict_t *ent);
void AnglesNormalize(vec3_t vec);
void Apply_Tech_Shell(gitem_t *item,edict_t *ent);
void AttackFinished(edict_t *self,float time);
void BecomeExplosion1(edict_t *self);
void BecomeExplosion2(edict_t *self);
void BecomeExplosion3(edict_t *self);
void BeginIntermission(edict_t *targ);
void Blaster_Fire(edict_t *ent,vec3_t g_offset,int damage,qboolean hyper,int effect,int color);
void Boss2MachineGun(edict_t *self);
void Boss2Rocket(edict_t *self);
void BossExplode(edict_t *self);
void CTFAdmin(edict_t *ent);
void CTFAdmin_Cancel(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeInstantItems(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeInstantWeap(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeMatchLen(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeMatchLock(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeMatchSetupLen(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeMatchStartLen(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeQuadDrop(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_ChangeWeapStay(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_MatchMode(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_MatchSet(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_Reset(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_Settings(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_SettingsApply(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_SettingsCancel(edict_t *ent,pmenuhnd_t *p);
void CTFAdmin_UpdateSettings(edict_t *ent,pmenuhnd_t *setmenu);
void CTFApplyAmmogen(edict_t *attacker,edict_t *targ);
void CTFApplyAmmogenSound(edict_t *ent);
void CTFApplyHasteSound(edict_t *ent);
void CTFApplyRegeneration(edict_t *ent);
void CTFApplyVampire(edict_t *ent,int dmg);
void CTFApplyVampireSound(edict_t *ent);
void CTFAssignGhost(edict_t *ent);
void CTFAssignSkin(edict_t *ent,char *s);
void CTFAssignTeam(gclient_t *who);
void CTFBoot(edict_t *ent);
void CTFCalcScores(void);
void CTFChaseCam(edict_t *ent,pmenuhnd_t *p);
void CTFCheckHurtCarrier(edict_t *targ,edict_t *attacker);
void CTFCredits(edict_t *ent,pmenuhnd_t *p);
void CTFDeadDropFlag(edict_t *self);
void CTFDeadDropTech(edict_t *ent);
void CTFDropFlagThink (edict_t *ent);
void CTFDropFlagTouch(edict_t *ent, edict_t *other, cplane_t *plane, csurface_t *surf);
void CTFDrop_Tech(edict_t *ent,gitem_t *item);
void CTFEffects(edict_t *player);
void CTFEndMatch(void);
void CTFFireGrapple(edict_t *self,vec3_t start,vec3_t dir,int damage,int speed,int effect);
void CTFFlagSetup(edict_t *ent);
void CTFFlagThink(edict_t *ent);
void CTFFragBonuses(edict_t *targ,edict_t *inflictor,edict_t *attacker);
void CTFGhost(edict_t *ent);
void CTFGrappleDrawCable(edict_t *self);
void CTFGrappleFire(edict_t *ent,vec3_t g_offset,int damage,int effect);
void CTFGrapplePull(edict_t *self);
void CTFGrappleTouch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void CTFHasTech(edict_t *who);
void CTFID_f(edict_t *ent);
void CTFInit(void);
void CTFJoinTeam(edict_t *ent,int desired_team);
void CTFJoinTeam1(edict_t *ent,pmenuhnd_t *p);
void CTFJoinTeam2(edict_t *ent,pmenuhnd_t *p);
void CTFJoinTeam3(edict_t *ent,pmenuhnd_t *p);
void CTFNotReady(edict_t *ent);
void CTFObserver(edict_t *ent);
void CTFOpenAdminMenu(edict_t *ent);
void CTFOpenJoinMenu(edict_t *ent);
void CTFPlayerList(edict_t *ent);
void CTFPlayerResetGrapple(edict_t *ent);
void CTFPrecache(void);
void CTFReady(edict_t *ent);
void CTFRequestMatch(edict_t *ent,pmenuhnd_t *p);
void CTFResetAllPlayers(void);
void CTFResetFlag(int ctf_team);
void CTFResetFlags(void);
void CTFResetGrapple(edict_t *self);
void CTFResetTech(void);
void CTFRespawnTech(edict_t *ent);
void CTFReturnToMain(edict_t *ent,pmenuhnd_t *p);
void CTFSay_Team(edict_t *who,char *msg);
void CTFSay_Team_Armor(edict_t *who, char *buf);
void CTFSay_Team_Health(edict_t *who, char *buf);
void CTFSay_Team_Location(edict_t *who, char *buf);
void CTFSay_Team_Sight(edict_t *who, char *buf);
void CTFSay_Team_Tech(edict_t *who, char *buf);
void CTFSay_Team_Weapon(edict_t *who, char *buf);
void CTFScoreboardMessage(edict_t *ent,edict_t *killer);
void CTFSetIDView(edict_t *ent);
void CTFSetPowerUpEffect(edict_t *ent,int def);
void CTFSetupTechSpawn(void);
void CTFShowScores(edict_t *ent,pmenu_t *p);
void CTFSpawn(void);
void CTFStartMatch(void);
void CTFStats(edict_t *ent);
void CTFTeam_f(edict_t *ent);
void CTFTechTouch(edict_t *ent,edict_t *other,cplane_t *plane,csurface_t *surf);
void CTFVoteNo(edict_t *ent);
void CTFVoteYes(edict_t *ent);
void CTFWarp(edict_t *ent);
void CTFWeapon_Grapple(edict_t *ent);
void CTFWeapon_Grapple_Fire(edict_t *ent,qboolean altfire);
void CTFWinElection(void);
void Cable_Think(edict_t *cable);
void CallMyFriends(edict_t *targ,edict_t *attacker);
void Cargo_Float_Up(edict_t *cargo);
void Cargo_Stop(edict_t *ent);
void Chaingun_Fire(edict_t *ent,qboolean altfire);
void ChangeWeapon(edict_t *ent);
void ChaseNext(edict_t *ent);
void ChasePrev(edict_t *ent);
void ChasecamRemove(edict_t *ent,int opt);
void ChasecamRestart(edict_t *ent);
void ChasecamStart(edict_t *ent);
void ChasecamTrack(edict_t *ent);
void CheckChasecam_Viewent(edict_t *ent);
void CheckDMRules(void);
void CheckNeedPass(void);
void CheckNumTechs(void);
void ChickMoan(edict_t *self);
void ChickReload(edict_t *self);
void ChickRocket(edict_t *self);
void ChickSlash(edict_t *self);
void Chick_PreAttack1(edict_t *self);
void ClientBegin(edict_t *ent);
void ClientBeginDeathmatch(edict_t *ent);
void ClientBeginServerFrame(edict_t *ent);
void ClientCommand(edict_t *ent);
void ClientDisconnect(edict_t *ent);
void ClientEndServerFrame(edict_t *ent);
void ClientEndServerFrames(void);
void ClientObituary(edict_t *self,edict_t *inflictor,edict_t *attacker);
void ClientPushPushable(edict_t *ent);
void ClientSpycam(edict_t *ent);
void ClientThink(edict_t *ent,usercmd_t *ucmd);
void ClientUserinfoChanged(edict_t *ent,char *userinfo);
void ClipGibVelocity(edict_t *ent);
void Cmd_Bbox_f(edict_t *ent);
void Cmd_Chasecam_Toggle(edict_t *ent);
void Cmd_Drop_f(edict_t *ent);
void Cmd_Fog_f(edict_t *ent);
void Cmd_Give_f(edict_t *ent);
void Cmd_God_f(edict_t *ent);
void Cmd_Help_f(edict_t *ent);
void Cmd_InvDrop_f(edict_t *ent);
void Cmd_InvUse_f(edict_t *ent);
void Cmd_Inven_f(edict_t *ent);
void Cmd_Kill_f(edict_t *ent);
void Cmd_Noclip_f(edict_t *ent);
void Cmd_Notarget_f(edict_t *ent);
void Cmd_PlayerList_f(edict_t *ent);
void Cmd_Players_f(edict_t *ent);
void Cmd_PutAway_f(edict_t *ent);
void Cmd_Say_f(edict_t *ent,qboolean team,qboolean arg0);
void Cmd_Score_f(edict_t *ent);
void Cmd_TechCount_f(edict_t *ent);
void Cmd_ToggleHud(void);
void Cmd_Use_f(edict_t *ent);
void Cmd_Wave_f(edict_t *ent);
void Cmd_WeapLast_f(edict_t *ent);
void Cmd_WeapNext_f(edict_t *ent);
void Cmd_WeapPrev_f(edict_t *ent);
void Com_Printf(char *msg,...);
void ContactGrenade_Touch (edict_t *ent, edict_t *other, cplane_t *plane, csurface_t *surf);
void CopyToBodyQue(edict_t *ent);
void Crane_AdjustSpeed(edict_t *ent);
void Crane_Move_Begin(edict_t *ent);
void Crane_Move_Done(edict_t *ent);
void Crane_Move_Final(edict_t *ent);
void Crane_Stop(edict_t *control);
void Crane_blocked(edict_t *self,edict_t *other);
void DeathmatchScoreboard(edict_t *ent);
void DeathmatchScoreboardMessage(edict_t *ent,edict_t *killer);
void DefendMyFriend(edict_t *self,edict_t *enemy);
void DeleteBadMedic(edict_t *self);
void DeleteNode(int p);
void DeleteReflection(edict_t *ent,int index);
void DoRespawn(edict_t *ent);
void Do_Text_Display(edict_t *activator,int flags,char *message);
void DrawBBox(edict_t *ent);
void Drop_Ammo(edict_t *ent,gitem_t *item);
void Drop_General(edict_t *ent,gitem_t *item);
void Drop_Jetpack(edict_t *ent,gitem_t *item);
void Drop_PowerArmor(edict_t *ent,gitem_t *item);
void Drop_Weapon(edict_t *ent,gitem_t *item);
void ED_CallSpawn(edict_t *ent);
void ED_ParseField(char *key,char *value,edict_t *ent);
void EndDMLevel(void);
void ExitLevel(void);
void FadeDieSink(edict_t *ent);
void FadeSink(edict_t *ent);
void FetchClientEntData(edict_t *ent);
void Fog(edict_t *ent);
void Fog_Init(void);
//void Fog_Off(edict_t *player_ent);
void Fog_Off(void);
void ForcewallOff(edict_t *player);
void FoundTarget(edict_t *self);
void G_CheckChaseStats(edict_t *ent);
void G_FindCraneParts(void);
void G_FindTeams(void);
void G_FreeEdict(edict_t *e);
void G_InitEdict(edict_t *e);
void G_ProjectSource(vec3_t point,vec3_t distance,vec3_t forward,vec3_t right,vec3_t result);
void G_ProjectSource2(vec3_t point,vec3_t distance,vec3_t forward,vec3_t right,vec3_t up,vec3_t result);
void G_RunEntity(edict_t *ent);
void G_RunFrame(void);
void G_SetClientEffects(edict_t *ent);
void G_SetClientEvent(edict_t *ent);
void G_SetClientFrame(edict_t *ent);
void G_SetClientSound(edict_t *ent);
void G_SetMovedir(vec3_t angles,vec3_t movedir);
void G_SetSpectatorStats(edict_t *ent);
void G_SetStats(edict_t *ent);
void G_TouchSolids(edict_t *ent);
void G_TouchTriggers(edict_t *ent);
void G_UseTarget(edict_t *ent,edict_t *activator,edict_t *target);
void G_UseTargets(edict_t *ent,edict_t *activator);
void GaldiatorMelee(edict_t *self);
void GameDirRelativePath(char *filename,char *output);
void GetChaseTarget(edict_t *ent);
void GladiatorGun(edict_t *self);
void Grenade_Evade(edict_t *monster);
void Grenade_Explode (edict_t *ent);
void Grenade_Touch (edict_t *ent, edict_t *other, cplane_t *plane, csurface_t *surf);
void GunnerFire(edict_t *self);
void GunnerGrenade(edict_t *self);
void HelpComputer(edict_t *ent);
void HintTestNext(edict_t *self,edict_t *hint);
void Hud_Off(void);
void Hud_On(void);
void HuntTarget(edict_t *self);
void InfantryMachineGun(edict_t *self);
void InitBodyQue(void);
void InitClientPersistant(gclient_t *client,int style);
void InitClientResp(gclient_t *client);
void InitGame(void);
void InitItems(void);
void InitTree(void);
void InitTrigger(edict_t *self);
void InitiallyDead(edict_t *self);
void InsertNode(int r);
void Jet_ApplyJet(edict_t *ent,usercmd_t *ucmd);
void Jet_ApplyLifting(edict_t *ent);
void Jet_ApplySparks(edict_t *ent);
void Jet_BecomeExplosion(edict_t *ent,int damage);
void Killed(edict_t *targ,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void Lights(void);
void LoadAliasData(void);
void LoadTransitionEnts(void);
void LookAhead(edict_t *train,vec3_t point,float dist);
void LookAtKiller(edict_t *self,edict_t *inflictor,edict_t *attacker);
void M_CatagorizePosition(edict_t *ent);
void M_ChangeYaw(edict_t *ent);
void M_CheckGround(edict_t *ent);
void M_FliesOff(edict_t *self);
void M_FliesOn(edict_t *self);
void M_FlyCheck(edict_t *self);
void M_MoveFrame(edict_t *self);
void M_MoveToGoal(edict_t *ent,float dist);
void M_ReactToDamage(edict_t *targ,edict_t *attacker);
void M_SetEffects(edict_t *ent);
void M_WorldEffects(edict_t *ent);
void M_droptofloor(edict_t *ent);
void Machinegun_Fire(edict_t *ent,qboolean altfire);
void MakronHyperblaster(edict_t *self);
void MakronPrecache(void);
void MakronRailgun(edict_t *self);
void MakronSaveloc(edict_t *self);
void MakronSpawn(edict_t *self);
void MakronToss(edict_t *self);
void MegaHealth_think(edict_t *self);
void MoveClientToIntermission(edict_t *ent);
void MoveRiders(edict_t *platform,edict_t *ignore,vec3_t move,vec3_t amove,qboolean turn);
void Move_Begin(edict_t *ent);
void Move_Calc(edict_t *ent,vec3_t dest,void(*func)(edict_t *));
void Move_Done(edict_t *ent);
void Move_Final(edict_t *ent);
void Moving_Speaker_Think(edict_t *speaker);
void NoAmmoWeaponChange(edict_t *ent);
void PMenu_Close(edict_t *ent);
void PMenu_Do_Update(edict_t *ent);
void PMenu_Next(edict_t *ent);
void PMenu_Prev(edict_t *ent);
void PMenu_Select(edict_t *ent);
void PMenu_Update(edict_t *ent);
void PMenu_UpdateEntry(pmenu_t *entry,const char *text,int align,SelectFunc_t SelectFunc);
void P_DamageFeedback(edict_t *player);
void P_FallingDamage(edict_t *ent);
void P_ProjectSource(gclient_t *client,vec3_t point,vec3_t distance,vec3_t forward,vec3_t right,vec3_t result);
void P_SlamDamage(edict_t *ent);
void P_WorldEffects(void);
void PlayerNoise(edict_t *who,vec3_t where,int type);
void PlayerTrail_Add(vec3_t spot);
void PlayerTrail_Init(void);
void PlayerTrail_New(vec3_t spot);
void PrecacheDebris(int type);
void PrecacheItem(gitem_t *it);
void PrintPmove(pmove_t *pm);
void PutClientInServer(edict_t *ent);
void ReadClient(FILE *f,gclient_t *client);
void ReadEdict(FILE *f,edict_t *ent);
void ReadField(FILE *f,field_t *field,byte *base);
void ReadGame(const char *filename);
void ReadLevel(const char *filename);
void ReadLevelLocals(FILE *f);
void RealBoundingBox(edict_t *ent,vec3_t mins,vec3_t maxs);
void ReflectExplosion(int type,vec3_t origin);
void ReflectSparks(int type,vec3_t origin,vec3_t movedir);
void ReflectSteam(vec3_t origin,vec3_t movedir,int count,int sounds,int speed,int wait,int nextid);
void ReflectTrail(int type,vec3_t start,vec3_t end);
void RemovePush(edict_t *ent);
void RemoveTechs(int oldtechcount,int newtechcount,int numtechtypes);
void Rocket_Evade(edict_t *rocket,vec3_t dir,float speed);
void RotateAngles(vec3_t in,vec3_t delta,vec3_t out);
void SP_CreateCoopSpots (edict_t *self);
void SP_FixCoopSpots (edict_t *self);
void SP_bolt(edict_t *bolt);
void SP_crane_beam(edict_t *self);
void SP_crane_control(edict_t *self);
void SP_crane_hoist(edict_t *self);
void SP_crane_hook(edict_t *self);
void SP_crane_reset(edict_t *self);
void SP_debris(edict_t *self);
void SP_func_areaportal(edict_t *ent);
void SP_func_bobbingwater(edict_t *self);
void SP_func_breakaway(edict_t *self);
void SP_func_button(edict_t *ent);
void SP_func_clock(edict_t *self);
void SP_func_conveyor(edict_t *self);
void SP_func_door(edict_t *ent);
void SP_func_door_rot_dh(edict_t *self);
void SP_func_door_rotating(edict_t *ent);
void SP_func_door_secret(edict_t *ent);
void SP_func_door_swinging(edict_t *self);
void SP_func_explosive(edict_t *self);
void SP_func_force_wall(edict_t *ent);
void SP_func_killbox(edict_t *ent);
void SP_func_monitor(edict_t *self);
void SP_func_object(edict_t *self);
void SP_func_pendulum(edict_t *self);
void SP_func_pivot(edict_t *self);
void SP_func_plat(edict_t *ent);
void SP_func_pushable(edict_t *self);
void SP_func_reflect(edict_t *self);
void SP_func_rotating(edict_t *ent);
void SP_func_rotating_dh(edict_t *self);
void SP_func_timer(edict_t *self);
void SP_func_trackchange(edict_t *self);
void SP_func_tracktrain(edict_t *self);
void SP_func_train(edict_t *ent);
void SP_func_trainbutton(edict_t *self);
void SP_func_vehicle(edict_t *self);
void SP_func_wall(edict_t *self);
void SP_func_water(edict_t *self);
void SP_gib(edict_t *self);
void SP_gibhead(edict_t *self);
void SP_grenade(edict_t *self);
void SP_handgrenade(edict_t *self);
void SP_hint_path(edict_t *self);
void SP_info_notnull(edict_t *self);
void SP_info_null(edict_t *self);
void SP_info_player_coop(edict_t *self);
void SP_info_player_deathmatch(edict_t *self);
void SP_info_player_intermission(edict_t *ent);
void SP_info_player_start(edict_t *ent);
void SP_info_player_team1(edict_t *self);
void SP_info_player_team2(edict_t *self);
void SP_info_player_team3(edict_t *self);
void SP_info_teleport_destination(edict_t *ent);
void SP_info_train_start(edict_t *self);
void SP_item_health(edict_t *self);
void SP_item_health_large(edict_t *self);
void SP_item_health_mega(edict_t *self);
void SP_item_health_small(edict_t *self);
void SP_light(edict_t *self);
void SP_light_mine1(edict_t *ent);
void SP_light_mine2(edict_t *ent);
void SP_misc_actor(edict_t *self);
void SP_misc_banner(edict_t *self);
void SP_misc_bigviper(edict_t *self);
void SP_misc_blackhole(edict_t *self);
void SP_misc_ctf_banner(edict_t *ent);
void SP_misc_ctf_small_banner(edict_t *ent);
void SP_misc_deadsoldier(edict_t *self);
void SP_misc_easterchick(edict_t *self);
void SP_misc_easterchick2(edict_t *self);
void SP_misc_eastertank(edict_t *self);
void SP_misc_explobox(edict_t *self);
void SP_misc_gib_arm(edict_t *self);
void SP_misc_gib_head(edict_t *self);
void SP_misc_gib_leg(edict_t *self);
void SP_misc_insane(edict_t *self);
void SP_misc_light(edict_t *self);
void SP_misc_satellite_dish(edict_t *self);
void SP_misc_strogg_ship(edict_t *self);
void SP_misc_teleporter(edict_t *self);
void SP_misc_teleporter_dest(edict_t *self);
void SP_misc_viper(edict_t *self);
void SP_misc_viper_bomb(edict_t *self);
void SP_model_spawn(edict_t *self);
void SP_model_train(edict_t *self);
void SP_model_turret(edict_t *self);
void SP_monster_berserk(edict_t *self);
void SP_monster_boss2(edict_t *self);
void SP_monster_boss3_stand(edict_t *self);
void SP_monster_brain(edict_t *self);
void SP_monster_chick(edict_t *self);
void SP_monster_commander_body(edict_t *self);
void SP_monster_flipper(edict_t *self);
void SP_monster_floater(edict_t *self);
void SP_monster_flyer(edict_t *self);
void SP_monster_gladiator(edict_t *self);
void SP_monster_gunner(edict_t *self);
void SP_monster_hover(edict_t *self);
void SP_monster_infantry(edict_t *self);
void SP_monster_jorg(edict_t *self);
void SP_monster_makron(edict_t *self);
void SP_monster_medic(edict_t *self);
void SP_monster_mutant(edict_t *self);
void SP_monster_parasite(edict_t *self);
void SP_monster_soldier(edict_t *self);
void SP_monster_soldier_light(edict_t *self);
void SP_monster_soldier_ss(edict_t *self);
void SP_monster_soldier_x(edict_t *self);
void SP_monster_supertank(edict_t *self);
void SP_monster_tank(edict_t *self);
void SP_path_corner(edict_t *self);
void SP_path_track(edict_t *self);
void SP_point_combat(edict_t *self);
void SP_rocket(edict_t *self);
void SP_target_CD(edict_t *self);
void SP_target_actor(edict_t *self);
void SP_target_anger(edict_t *self);
void SP_target_animation(edict_t *self);
void SP_target_attractor(edict_t *self);
void SP_target_blaster(edict_t *self);
void SP_target_change(edict_t *self);
void SP_target_changelevel(edict_t *ent);
void SP_target_character(edict_t *self);
void SP_target_clone(edict_t *self);
void SP_target_command(edict_t *self);
void SP_target_crosslevel_target(edict_t *self);
void SP_target_crosslevel_trigger(edict_t *self);
void SP_target_earthquake(edict_t *self);
void SP_target_effect(edict_t *self);
void SP_target_explosion(edict_t *ent);
void SP_target_fade(edict_t *self);
void SP_target_failure(edict_t *self);
void SP_target_fog(edict_t *self);
void SP_target_fountain(edict_t *self);
void SP_target_goal(edict_t *ent);
void SP_target_help(edict_t *ent);
void SP_target_laser(edict_t *self);
void SP_target_lightramp(edict_t *self);
void SP_target_lightswitch(edict_t *self);
void SP_target_locator(edict_t *self);
void SP_target_lock(edict_t *self);
void SP_target_lock_clue(edict_t *self);
void SP_target_lock_code(edict_t *self);
void SP_target_lock_digit(edict_t *self);
void SP_target_monitor(edict_t *self);
void SP_target_monsterbattle(edict_t *self);
void SP_target_movewith(edict_t *self);
void SP_target_precipitation(edict_t *self);
void SP_target_rocks(edict_t *self);
void SP_target_rotation(edict_t *self);
void SP_target_secret(edict_t *ent);
void SP_target_set_effect(edict_t *self);
void SP_target_skill(edict_t *self);
void SP_target_sky(edict_t *self);
void SP_target_spawner(edict_t *self);
void SP_target_speaker(edict_t *ent);
void SP_target_splash(edict_t *self);
void SP_target_string(edict_t *self);
void SP_target_temp_entity(edict_t *ent);
void SP_target_text(edict_t *self);
void SP_thing(edict_t *self);
void SP_tremor_trigger_multiple(edict_t *ent);
void SP_tremor_trigger_multiple(edict_t *self);
void SP_trigger_always(edict_t *ent);
void SP_trigger_bbox(edict_t *self);
void SP_trigger_counter(edict_t *self);
void SP_trigger_disguise(edict_t *trigger);
void SP_trigger_elevator(edict_t *self);
void SP_trigger_fog(edict_t *self);
void SP_trigger_fog_bbox(edict_t *self);
void SP_trigger_gravity(edict_t *self);
void SP_trigger_hurt(edict_t *self);
void SP_trigger_inside(edict_t *self);
void SP_trigger_key(edict_t *self);
void SP_trigger_look(edict_t *self);
void SP_trigger_mass(edict_t *self);
void SP_trigger_monsterjump(edict_t *self);
void SP_trigger_multiple(edict_t *ent);
void SP_trigger_once(edict_t *ent);
void SP_trigger_push(edict_t *self);
void SP_trigger_relay(edict_t *self);
void SP_trigger_scales(edict_t *self);
void SP_trigger_speaker(edict_t *self);
void SP_trigger_switch(edict_t *self);
void SP_trigger_teleport(edict_t *ent);
void SP_trigger_teleporter(edict_t *self);
void SP_trigger_transition(edict_t *self);
void SP_turret_base(edict_t *self);
void SP_turret_breach(edict_t *self);
void SP_turret_driver(edict_t *self);
void SP_viewthing(edict_t *ent);
void SP_worldspawn(edict_t *ent);
void SVCmd_AddIP_f(void);
void SVCmd_ListIP_f(void);
void SVCmd_RemoveIP_f(void);
void SVCmd_WriteIP_f(void);
void SV_AddBlend(float r,float g,float b,float a,float *v_blend);
void SV_AddGravity(edict_t *ent);
void SV_AddRotationalFriction(edict_t *ent);
void SV_CalcBlend(edict_t *ent);
void SV_CalcGunOffset(edict_t *ent);
void SV_CalcViewOffset(edict_t *ent);
void SV_CheckVelocity(edict_t *ent);
void SV_FixCheckBottom(edict_t *ent);
void SV_Impact(edict_t *e1,trace_t *trace);
void SV_NewChaseDir(edict_t *actor,edict_t *enemy,float dist);
void SV_Physics_Conveyor(edict_t *ent);
void SV_Physics_Debris(edict_t *ent);
void SV_Physics_Noclip(edict_t *ent);
void SV_Physics_None(edict_t *ent);
void SV_Physics_Pusher(edict_t *ent);
void SV_Physics_Step(edict_t *ent);
void SV_Physics_Toss(edict_t *ent);
void SV_Physics_Vehicle(edict_t *ent);
void SaveClientData(void);
void SaveEntProps(edict_t *e,FILE *f);
void SelectNextItem(edict_t *ent,int itflags);
void SelectPrevItem(edict_t *ent,int itflags);
void SelectSpawnPoint(edict_t *ent,vec3_t origin,vec3_t angles,int *style,int *health);
void SelectStartWeapon(gclient_t *client,int style);
void ServerCommand(void);
void SetAmmoPickupValues(void);
void SetCTFStats(edict_t *ent);
void SetCableLength(edict_t *cable);
void SetItemNames(void);
void SetLazarusCrosshair(edict_t *ent);
void SetLevelName(pmenu_t *p);
void SetRespawn(edict_t *ent,float delay);
void SetSensitivities(edict_t *ent,qboolean reset);
void SetSpotlightLength(edict_t *hook);
void SetupHintPaths(void);
void ShiftItem(edict_t *ent,int direction);
void ShutdownGame(void);
void SpawnDamage(int type,vec3_t origin,vec3_t normal);
void SpawnEntities(char *mapname,char *entities,char *spawnpoint);
void SpawnForcewall(edict_t *player);
void SpawnItem(edict_t *ent,gitem_t *item);
void SpawnMoreTechs(int oldtechcount,int newtechcount,int numtechtypes);
void SpawnTech(gitem_t *item, edict_t *spot);
void SpawnTechs (edict_t *ent);
void Svcmd_Test_f(void);
void SwitchToBestStartWeapon(gclient_t *client);
void Sys_Error(char *error,...);
void TH_viewthing(edict_t *ent);
void TTCTFOpenJoinMenu(edict_t *ent);
void T_Damage(edict_t *targ,edict_t *inflictor,edict_t *attacker,vec3_t dir,vec3_t point,vec3_t normal,int damage,int knockback,int dflags,int mod);
void T_RadiusDamage(edict_t *inflictor,edict_t *attacker,float damage,edict_t *ignore,float radius,int mod,double dmg_slope);
void TankBlaster(edict_t *self);
void TankMachineGun(edict_t *self);
void TankRocket(edict_t *self);
void TankStrike(edict_t *self);
void TechThink(edict_t *tech);
void Text_BuildDisplay(texthnd_t *hnd);
void Text_Close(edict_t *ent);
void Text_Next(edict_t *ent);
void Text_Open(edict_t *ent);
void Text_Prev(edict_t *ent);
void Text_Update(edict_t *ent);
void Think_AccelMove(edict_t *ent);
void Think_Boss3Stand(edict_t *ent);
void Think_CalcMoveSpeed(edict_t *self);
void Think_Delay(edict_t *ent);
void Think_Delay_Single(edict_t *ent);
void Think_SpawnDoorTrigger(edict_t *ent);
void Think_Weapon(edict_t *ent);
void ThrowClientHead(edict_t *self,int damage);
void ThrowDebris(edict_t *self,char *modelname,float speed,vec3_t origin,int skin,int effects);
void ThrowGib(edict_t *self,char *gibname,int damage,int type);
void ThrowHead(edict_t *self,char *gibname,int damage,int type);
void ThrowRock(edict_t *self,char *modelname,float speed,vec3_t origin,vec3_t size,int mass);
void ToggleLights(void);
void TossClientWeapon(edict_t *self);
void Touch_DoorTrigger(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void Touch_Item(edict_t *ent,edict_t *other,cplane_t *plane,csurface_t *surf);
void Touch_Multi(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void Touch_Plat_Center(edict_t *ent,edict_t *other,cplane_t *plane,csurface_t *surf);
void TraceAimPoint(vec3_t start,vec3_t target);
void TreadSound(edict_t *self);
void UpdateChaseCam(edict_t *ent);
void Use_Areaportal(edict_t *ent,edict_t *other,edict_t *activator);
void Use_Boss3(edict_t *ent,edict_t *other,edict_t *activator);
void Use_Breather(edict_t *ent,gitem_t *item);
void Use_Crane_Control(edict_t *ent,edict_t *other,edict_t *activator);
void Use_Envirosuit(edict_t *ent,gitem_t *item);
void Use_Flashlight(edict_t *ent,gitem_t *item);
void Use_Invulnerability(edict_t *ent,gitem_t *item);
void Use_Item(edict_t *ent,edict_t *other,edict_t *activator);
void Use_Jet(edict_t *ent,gitem_t *item);
void Use_Multi(edict_t *ent,edict_t *other,edict_t *activator);
void Use_Plat(edict_t *ent,edict_t *other,edict_t *activator);
void Use_PowerArmor(edict_t *ent,gitem_t *item);
void Use_Quad(edict_t *ent,gitem_t *item);
void Use_Silencer(edict_t *ent,gitem_t *item);
void Use_Stasis(edict_t *ent,gitem_t *item);
void Use_Target_Help(edict_t *self,edict_t *other,edict_t *activator);
void Use_Target_Speaker(edict_t *ent,edict_t *other,edict_t *activator);
void Use_Target_Tent(edict_t *self,edict_t *other,edict_t *activator);
void Use_Target_Text(edict_t *self,edict_t *other,edict_t *activator);
void Use_Weapon(edict_t *ent,gitem_t *in_item);
void Use_tremor_Multi(edict_t *self,edict_t *other,edict_t *activator);
void ValidateSelectedItem(edict_t *ent);
void VelocityForDamage(int damage,vec3_t v);
void Weapon_BFG(edict_t *ent);
void Weapon_Blaster(edict_t *ent);
void Weapon_Blaster_Fire(edict_t *ent,qboolean altfire);
void Weapon_Chaingun(edict_t *ent);
void Weapon_Generic(edict_t *ent,int FRAME_ACTIVATE_LAST,int FRAME_FIRE_LAST,int FRAME_IDLE_LAST,int FRAME_DEACTIVATE_LAST,int *pause_frames,int *fire_frames,void(*fire)(edict_t *ent,qboolean altfire));
void Weapon_Generic2(edict_t *ent,int FRAME_ACTIVATE_LAST,int FRAME_FIRE_LAST,int FRAME_IDLE_LAST,int FRAME_DEACTIVATE_LAST,int *pause_frames,int *fire_frames,void(*fire)(edict_t *ent,qboolean altfire));
void Weapon_Grenade(edict_t *ent);
void Weapon_GrenadeLauncher(edict_t *ent);
void Weapon_HomingMissileLauncher(edict_t *ent);
void Weapon_HomingMissileLauncher_Fire(edict_t *ent,qboolean altfire);
void Weapon_HyperBlaster(edict_t *ent);
void Weapon_HyperBlaster_Fire(edict_t *ent,qboolean altfire);
void Weapon_Machinegun(edict_t *ent);
void Weapon_Null(edict_t *ent);
void Weapon_Railgun(edict_t *ent);
void Weapon_RocketLauncher(edict_t *ent);
void Weapon_RocketLauncher_Fire(edict_t *ent,qboolean altfire);
void Weapon_Shotgun(edict_t *ent);
void Weapon_SuperShotgun(edict_t *ent);
void WhatIsIt(edict_t *ent);
void WhatsIt(edict_t *ent);
void WriteClient(FILE *f,gclient_t *client);
void WriteEdict(FILE *f,edict_t *ent);
void WriteField1(FILE *f,field_t *field,byte *base);
void WriteField2(FILE *f,field_t *field,byte *base);
void WriteGame(const char *filename, qboolean autosave);
void WriteLevel(const char *filename);
void WriteLevelLocals(FILE *f);
void WriteTransitionEdict(FILE *f,edict_t *changelevel,edict_t *ent);
void abortHeal(edict_t *self,qboolean mark);
void actorBFG(edict_t *self);
void actorBlaster(edict_t *self);
void actorChaingun(edict_t *self);
void actorGrenadeLauncher(edict_t *self);
void actorHyperblaster(edict_t *self);
void actorMachineGun(edict_t *self);
void actorRailGun(edict_t *self);
void actorRocket(edict_t *self);
void actorShotgun(edict_t *self);
void actorSuperShotgun(edict_t *self);
void actor_attack(edict_t *self);
void actor_dead(edict_t *self);
void actor_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void actor_end_jump(edict_t *self);
void actor_files(void);
void actor_fire(edict_t *self);
void actor_ideal_range(edict_t *self);
void actor_jump(edict_t *self);
void actor_moveit(edict_t *player,edict_t *actor);
void actor_no_weapon_sound(edict_t *self);
void actor_pain(edict_t *self,edict_t *other,float kick,int damage);
void actor_run(edict_t *self);
void actor_run_back(edict_t *self);
void actor_salute(edict_t *self);
void actor_seekcover(edict_t *self);
void actor_stand(edict_t *self);
void actor_switch(edict_t *self);
void actor_use(edict_t *self,edict_t *other,edict_t *activator);
void actor_walk(edict_t *self);
void actor_walk_back(edict_t *self);
void ai_charge(edict_t *self,float dist);
void ai_move(edict_t *self,float dist);
void ai_run(edict_t *self,float dist);
void ai_run_melee(edict_t *self);
void ai_run_missile(edict_t *self);
void ai_run_slide(edict_t *self,float distance);
void ai_stand(edict_t *self,float dist);
void ai_turn(edict_t *self,float dist);
void ai_walk(edict_t *self,float dist);
void barrel_delay(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void barrel_explode(edict_t *self);
void barrel_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void berserk_attack_club(edict_t *self);
void berserk_attack_spike(edict_t *self);
void berserk_dead(edict_t *self);
void berserk_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void berserk_fidget(edict_t *self);
void berserk_jump(edict_t *self);
void berserk_melee(edict_t *self);
void berserk_pain(edict_t *self,edict_t *other,float kick,int damage);
void berserk_run(edict_t *self);
void berserk_search(edict_t *self);
void berserk_sight(edict_t *self,edict_t *other);
void berserk_stand(edict_t *self);
void berserk_strike(edict_t *self);
void berserk_swing(edict_t *self);
void berserk_walk(edict_t *self);
void bfg_explode(edict_t *self);
void bfg_think(edict_t *self);
void bfg_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void blaster_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void bob_init(edict_t *self);
void bob_think(edict_t *self);
void body_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void bolt_delayed_start(edict_t *bolt);
void boss2_attack(edict_t *self);
void boss2_attack_mg(edict_t *self);
void boss2_dead(edict_t *self);
void boss2_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void boss2_firebullet_left(edict_t *self);
void boss2_firebullet_right(edict_t *self);
void boss2_pain(edict_t *self,edict_t *other,float kick,int damage);
void boss2_reattack_mg(edict_t *self);
void boss2_run(edict_t *self);
void boss2_search(edict_t *self);
void boss2_stand(edict_t *self);
void boss2_walk(edict_t *self);
void box_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void box_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void box_use(edict_t *self,edict_t *other,edict_t *activator);
void box_water_friction(edict_t *ent);
void brain_chest_closed(edict_t *self);
void brain_chest_open(edict_t *self);
void brain_dead(edict_t *self);
void brain_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void brain_dodge(edict_t *self,edict_t *attacker,float eta);
void brain_duck_down(edict_t *self);
void brain_duck_hold(edict_t *self);
void brain_duck_up(edict_t *self);
void brain_hit_left(edict_t *self);
void brain_hit_right(edict_t *self);
void brain_idle(edict_t *self);
void brain_melee(edict_t *self);
void brain_pain(edict_t *self,edict_t *other,float kick,int damage);
void brain_run(edict_t *self);
void brain_search(edict_t *self);
void brain_sight(edict_t *self,edict_t *other);
void brain_stand(edict_t *self);
void brain_swing_left(edict_t *self);
void brain_swing_right(edict_t *self);
void brain_tentacle_attack(edict_t *self);
void brain_walk(edict_t *self);
void button_done(edict_t *self);
void button_fire(edict_t *self);
void button_killed(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void button_return(edict_t *self);
void button_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void button_use(edict_t *self,edict_t *other,edict_t *activator);
void button_wait(edict_t *self);
void camera_off(edict_t *ent);
void camera_on(edict_t *ent);
void cargo_blocked(edict_t *cargo,edict_t *obstacle);
void check_dodge (edict_t *self, vec3_t start, vec3_t dir, int speed);
void check_reverse_rotation(edict_t *self,vec3_t point);
void chick_attack(edict_t *self);
void chick_attack1(edict_t *self);
void chick_dead(edict_t *self);
void chick_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void chick_dodge(edict_t *self,edict_t *attacker,float eta);
void chick_duck_down(edict_t *self);
void chick_duck_hold(edict_t *self);
void chick_duck_up(edict_t *self);
void chick_fidget(edict_t *self);
void chick_melee(edict_t *self);
void chick_pain(edict_t *self,edict_t *other,float kick,int damage);
void chick_rerocket(edict_t *self);
void chick_reslash(edict_t *self);
void chick_run(edict_t *self);
void chick_sight(edict_t *self,edict_t *other);
void chick_skip_frames(edict_t *self);
void chick_slash(edict_t *self);
void chick_stand(edict_t *self);
void chick_walk(edict_t *self);
void cleanupHeal(edict_t *self,qboolean change_frame);
void cleanupHealTarget(edict_t *ent);
void clone(edict_t *self,edict_t *other,edict_t *activator);
void commander_body_drop(edict_t *self);
void commander_body_think(edict_t *self);
void commander_body_use(edict_t *self,edict_t *other,edict_t *activator);
void crane_control_action(edict_t *control,edict_t *activator,vec3_t point);
void crane_light_off(edict_t *light);
void crane_reset_go(edict_t *temp);
void crane_reset_use(edict_t *self,edict_t *other,edict_t *activator);
void deadmonster_think(edict_t *self);
void debris_delayed_start(edict_t *debris);
void debris_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void debug_printf(char *fmt,...);
void decoy_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void decoy_think(edict_t *self);
void directed_debris_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void door_blocked(edict_t *self,edict_t *other);
void door_destroyed(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void door_go_down(edict_t *self);
void door_go_up(edict_t *self,edict_t *activator);
void door_hit_bottom(edict_t *self);
void door_hit_top(edict_t *self);
void door_killed(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void door_secret_blocked(edict_t *self,edict_t *other);
void door_secret_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void door_secret_done(edict_t *self);
void door_secret_move1(edict_t *self);
void door_secret_move2(edict_t *self);
void door_secret_move3(edict_t *self);
void door_secret_move4(edict_t *self);
void door_secret_move5(edict_t *self);
void door_secret_move6(edict_t *self);
void door_secret_use(edict_t *self,edict_t *other,edict_t *activator);
void door_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void door_use(edict_t *self,edict_t *other,edict_t *activator);
void door_use_areaportals(edict_t *self,qboolean open);
void drop_add_to_chain(edict_t *drop);
void drop_make_touchable (edict_t *ent);
void drop_splash(edict_t *drop);
void drop_temp_touch (edict_t *ent, edict_t *other, cplane_t *plane, csurface_t *surf);
void drop_touch(edict_t *drop,edict_t *other,cplane_t *plane,csurface_t *surf);
void droptofloor(edict_t *ent);
void faker_animate(edict_t *self);
void find_target_blaster_target(edict_t *self,edict_t *other,edict_t *activator);
void find_tracktrain(edict_t *self);
void fire_bfg(edict_t *self,vec3_t start,vec3_t dir,int damage,int speed,float damage_radius);
void fire_blaster(edict_t *self,vec3_t start,vec3_t dir,int damage,int speed,int effect,qboolean hyper,int color);
void fire_bullet(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int kick,int hspread,int vspread,int mod);
void fire_grenade(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int speed,float timer,float damage_radius,qboolean contact);
void fire_grenade2(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int speed,float timer,float damage_radius,qboolean held);
void fire_lead (edict_t *self, vec3_t start, vec3_t aimdir, int damage, int kick, int te_impact, int hspread, int vspread, int mod);
void fire_rail(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int kick);
void fire_rail_alt(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int kick);
void fire_rocket(edict_t *self,vec3_t start,vec3_t dir,int damage,int speed,float damage_radius,int radius_damage,edict_t *home_target);
void fire_shotgun(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int kick,int hspread,int vspread,int count,int mod);
void flipper_bite(edict_t *self);
void flipper_breathe(edict_t *self);
void flipper_dead(edict_t *self);
void flipper_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void flipper_melee(edict_t *self);
void flipper_pain(edict_t *self,edict_t *other,float kick,int damage);
void flipper_preattack(edict_t *self);
void flipper_run(edict_t *self);
void flipper_run_loop(edict_t *self);
void flipper_search(edict_t *self);
void flipper_sight(edict_t *self,edict_t *other);
void flipper_stand(edict_t *self);
void flipper_start_run(edict_t *self);
void flipper_walk(edict_t *self);
void floater_attack(edict_t *self);
void floater_dead(edict_t *self);
void floater_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void floater_fire_blaster(edict_t *self);
void floater_idle(edict_t *self);
void floater_melee(edict_t *self);
void floater_pain(edict_t *self,edict_t *other,float kick,int damage);
void floater_run(edict_t *self);
void floater_sight(edict_t *self,edict_t *other);
void floater_stand(edict_t *self);
void floater_walk(edict_t *self);
void floater_wham(edict_t *self);
void floater_zap(edict_t *self);
void flyer_attack(edict_t *self);
void flyer_check_melee(edict_t *self);
void flyer_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void flyer_fire(edict_t *self,int flash_number);
void flyer_fireleft(edict_t *self);
void flyer_fireright(edict_t *self);
void flyer_idle(edict_t *self);
void flyer_loop_melee(edict_t *self);
void flyer_melee(edict_t *self);
void flyer_nextmove(edict_t *self);
void flyer_pain(edict_t *self,edict_t *other,float kick,int damage);
void flyer_pop_blades(edict_t *self);
void flyer_run(edict_t *self);
void flyer_setstart(edict_t *self);
void flyer_sight(edict_t *self,edict_t *other);
void flyer_slash_left(edict_t *self);
void flyer_slash_right(edict_t *self);
void flyer_stand(edict_t *self);
void flyer_start(edict_t *self);
void flyer_stop(edict_t *self);
void flyer_walk(edict_t *self);
void flymonster_start(edict_t *self);
void flymonster_start_go(edict_t *self);
void force_wall_think(edict_t *self);
void force_wall_use(edict_t *self,edict_t *other,edict_t *activator);
void forcewall_think(edict_t *self);
void func_breakaway_activate(edict_t *self,edict_t *other,edict_t *activator);
void func_breakaway_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void func_breakaway_fall(edict_t *self);
void func_breakaway_hit(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void func_breakaway_makesolid(edict_t *self);
void func_breakaway_spawn(edict_t *self,edict_t *other,edict_t *activator);
void func_breakaway_think(edict_t *self);
void func_breakaway_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void func_breakaway_use(edict_t *self,edict_t *other,edict_t *activator);
void func_clock_format_countdown (edict_t *self);
void func_clock_reset (edict_t *self);
void func_clock_think(edict_t *self);
void func_clock_use(edict_t *self,edict_t *other,edict_t *activator);
void func_conveyor_use(edict_t *self,edict_t *other,edict_t *activator);
void func_door_rot_dh_init(edict_t *ent);
void func_door_swinging_init(edict_t *self);
void func_explosive_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void func_explosive_explode(edict_t *self);
void func_explosive_makeshootable(edict_t *self,edict_t *other,edict_t *activator);
void func_explosive_respawn(edict_t *self);
void func_explosive_spawn(edict_t *self,edict_t *other,edict_t *activator);
void func_explosive_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void func_explosive_use(edict_t *self,edict_t *other,edict_t *activator);
void func_force_wall_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void func_monitor_init(edict_t *self);
void func_object_release(edict_t *self);
void func_object_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void func_object_use(edict_t *self,edict_t *other,edict_t *activator);
void func_pushable_spawn(edict_t *self,edict_t *other,edict_t *activator);
void func_rotating_dh_init(edict_t *ent);
void func_timer_think(edict_t *self);
void func_timer_use(edict_t *self,edict_t *other,edict_t *activator);
void func_tracktrain_find(edict_t *self);
void func_train_find(edict_t *self);
void func_vehicle_explode(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void func_wall_use(edict_t *self,edict_t *other,edict_t *activator);
void gib_delayed_start(edict_t *gib);
void gib_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void gib_fade(edict_t *self);
void gib_fade2(edict_t *self);
void gib_think(edict_t *self);
void gib_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void gladiator_attack(edict_t *self);
void gladiator_cleaver_swing(edict_t *self);
void gladiator_dead(edict_t *self);
void gladiator_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void gladiator_idle(edict_t *self);
void gladiator_melee(edict_t *self);
void gladiator_pain(edict_t *self,edict_t *other,float kick,int damage);
void gladiator_run(edict_t *self);
void gladiator_search(edict_t *self);
void gladiator_sight(edict_t *self,edict_t *other);
void gladiator_stand(edict_t *self);
void gladiator_walk(edict_t *self);
void grenade_delayed_start(edict_t *grenade);
void gunner_attack(edict_t *self);
void gunner_dead(edict_t *self);
void gunner_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void gunner_dodge(edict_t *self,edict_t *attacker,float eta);
void gunner_duck_down(edict_t *self);
void gunner_duck_hold(edict_t *self);
void gunner_duck_up(edict_t *self);
void gunner_fidget(edict_t *self);
void gunner_fire_chain(edict_t *self);
void gunner_idlesound(edict_t *self);
void gunner_jump(edict_t *self);
void gunner_opengun(edict_t *self);
void gunner_pain(edict_t *self,edict_t *other,float kick,int damage);
void gunner_refire_chain(edict_t *self);
void gunner_run(edict_t *self);
void gunner_runandshoot(edict_t *self);
void gunner_search(edict_t *self);
void gunner_sight(edict_t *self,edict_t *other);
void gunner_stand(edict_t *self);
void gunner_walk(edict_t *self);
void handgrenade_delayed_start(edict_t *grenade);
void hintpath_start(edict_t *monster,edict_t *spot);
void hintpath_stop(edict_t *monster);
void homing_think(edict_t *self);
void hover_attack(edict_t *self);
void hover_dead(edict_t *self);
void hover_deadthink(edict_t *self);
void hover_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void hover_fire_blaster(edict_t *self);
void hover_pain(edict_t *self,edict_t *other,float kick,int damage);
void hover_reattack(edict_t *self);
void hover_run(edict_t *self);
void hover_search(edict_t *self);
void hover_sight(edict_t *self,edict_t *other);
void hover_stand(edict_t *self);
void hover_start_attack(edict_t *self);
void hover_walk(edict_t *self);
void hrocket_turret_fire(edict_t *self,edict_t *owner,vec3_t start,vec3_t dir,vec3_t start2,vec3_t dir2,int damage,int speed,float damage_radius,int radius_damage,edict_t *home_target);
void hurt_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void hurt_use(edict_t *self,edict_t *other,edict_t *activator);
void infantry_attack(edict_t *self);
void infantry_cock_gun(edict_t *self);
void infantry_dead(edict_t *self);
void infantry_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void infantry_dodge(edict_t *self,edict_t *attacker,float eta);
void infantry_duck_down(edict_t *self);
void infantry_duck_hold(edict_t *self);
void infantry_duck_up(edict_t *self);
void infantry_fidget(edict_t *self);
void infantry_fire(edict_t *self);
void infantry_jump(edict_t *self);
void infantry_pain(edict_t *self,edict_t *other,float kick,int damage);
void infantry_run(edict_t *self);
void infantry_sight(edict_t *self,edict_t *other);
void infantry_smack(edict_t *self);
void infantry_stand(edict_t *self);
void infantry_swing(edict_t *self);
void infantry_walk(edict_t *self);
void insane_checkdown(edict_t *self);
void insane_checkup(edict_t *self);
void insane_cross(edict_t *self);
void insane_dead(edict_t *self);
void insane_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void insane_fist(edict_t *self);
void insane_moan(edict_t *self);
void insane_onground(edict_t *self);
void insane_pain(edict_t *self,edict_t *other,float kick,int damage);
void insane_run(edict_t *self);
void insane_scream(edict_t *self);
void insane_shake(edict_t *self);
void insane_stand(edict_t *self);
void insane_walk(edict_t *self);
void item_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void jorgBFG(edict_t *self);
void jorg_attack(edict_t *self);
void jorg_attack1(edict_t *self);
void jorg_dead(edict_t *self);
void jorg_death_hit(edict_t *self);
void jorg_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void jorg_firebullet(edict_t *self);
void jorg_firebullet_left(edict_t *self);
void jorg_firebullet_right(edict_t *self);
void jorg_idle(edict_t *self);
void jorg_pain(edict_t *self,edict_t *other,float kick,int damage);
void jorg_reattack1(edict_t *self);
void jorg_run(edict_t *self);
void jorg_search(edict_t *self);
void jorg_stand(edict_t *self);
void jorg_step_left(edict_t *self);
void jorg_step_right(edict_t *self);
void jorg_walk(edict_t *self);
void kick_attack(edict_t *ent);
void laser_sight_think(edict_t *laser);
void leaf_fade(edict_t *ent);
void leaf_fade2(edict_t *ent);
void light_use (edict_t *self, edict_t *other, edict_t *activator);
void lithium_defaults(void);
void lock_clue_initialize(edict_t *self);
void lock_clue_think(edict_t *self);
void lock_clue_use(edict_t *self,edict_t *other,edict_t *activator);
void lock_code_use(edict_t *self,edict_t *other,edict_t *activator);
void lock_digit_increment(edict_t *digit,edict_t *activator);
void lock_initialize(edict_t *lock);
void makronBFG(edict_t *self);
void makron_attack(edict_t *self);
void makron_brainsplorch(edict_t *self);
void makron_dead(edict_t *self);
void makron_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void makron_hit(edict_t *self);
void makron_pain(edict_t *self,edict_t *other,float kick,int damage);
void makron_popup(edict_t *self);
void makron_prerailgun(edict_t *self);
void makron_run(edict_t *self);
void makron_sight(edict_t *self,edict_t *other);
void makron_stand(edict_t *self);
void makron_step_left(edict_t *self);
void makron_step_right(edict_t *self);
void makron_taunt(edict_t *self);
void makron_torso(edict_t *ent);
void makron_torso_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void makron_torso_think(edict_t *self);
void makron_walk(edict_t *self);
void medic_NextPatrolPoint(edict_t *self,edict_t *hint);
void medic_StopPatrolling(edict_t *self);
void medic_attack(edict_t *self);
void medic_cable_attack(edict_t *self);
void medic_continue(edict_t *self);
void medic_dead(edict_t *self);
void medic_deadmonster_think(edict_t *self);
void medic_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void medic_dodge(edict_t *self,edict_t *attacker,float eta);
void medic_duck_down(edict_t *self);
void medic_duck_hold(edict_t *self);
void medic_duck_up(edict_t *self);
void medic_fire_blaster(edict_t *self);
void medic_hook_launch(edict_t *self);
void medic_hook_retract(edict_t *self);
void medic_idle(edict_t *self);
void medic_pain(edict_t *self,edict_t *other,float kick,int damage);
void medic_run(edict_t *self);
void medic_search(edict_t *self);
void medic_sight(edict_t *self,edict_t *other);
void medic_stand(edict_t *self);
void medic_walk(edict_t *self);
void misc_banner_think(edict_t *ent);
void misc_blackhole_think(edict_t *self);
void misc_blackhole_transparent(edict_t *ent);
void misc_blackhole_use(edict_t *ent,edict_t *other,edict_t *activator);
void misc_ctf_banner_think (edict_t *ent);
void misc_deadsoldier_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void misc_deadsoldier_flieson(edict_t *self);
void misc_easterchick2_think(edict_t *self);
void misc_easterchick_think(edict_t *self);
void misc_eastertank_think(edict_t *self);
void misc_light_think(edict_t *self);
void misc_light_use(edict_t *self,edict_t *other,edict_t *activator);
void misc_satellite_dish_think(edict_t *self);
void misc_satellite_dish_use(edict_t *self,edict_t *other,edict_t *activator);
void misc_strogg_ship_use(edict_t *self,edict_t *other,edict_t *activator);
void misc_viper_bomb_prethink(edict_t *self);
void misc_viper_bomb_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void misc_viper_bomb_use(edict_t *self,edict_t *other,edict_t *activator);
void misc_viper_use(edict_t *self,edict_t *other,edict_t *activator);
void model_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void model_spawn_use(edict_t *self,edict_t *other,edict_t *activator);
void model_train_animator(edict_t *animator);
void modelspawn_think(edict_t *self);
void monster_death_use(edict_t *self);
void monster_fire_bfg(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int speed,int kick,float damage_radius,int flashtype);
void monster_fire_blaster(edict_t *self,vec3_t start,vec3_t dir,int damage,int speed,int flashtype,int effect,int color);
void monster_fire_bullet(edict_t *self,vec3_t start,vec3_t dir,int damage,int kick,int hspread,int vspread,int flashtype);
void monster_fire_grenade(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int speed,int flashtype);
void monster_fire_railgun(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int kick,int flashtype);
void monster_fire_rocket(edict_t *self,vec3_t start,vec3_t dir,int damage,int speed,int flashtype,edict_t *homing_target);
void monster_fire_shotgun(edict_t *self,vec3_t start,vec3_t aimdir,int damage,int kick,int hspread,int vspread,int count,int flashtype);
void monster_start_go(edict_t *self);
void monster_think(edict_t *self);
void monster_triggered_spawn(edict_t *self);
void monster_triggered_spawn_use(edict_t *self,edict_t *other,edict_t *activator);
void monster_triggered_start(edict_t *self);
void monster_use(edict_t *self,edict_t *other,edict_t *activator);
void movewith_detach(edict_t *child);
void movewith_init(edict_t *ent);
void movewith_update(edict_t *self);
void multi_trigger(edict_t *ent);
void multi_wait(edict_t *ent);
void mutant_check_landing(edict_t *self);
void mutant_check_refire(edict_t *self);
void mutant_dead(edict_t *self);
void mutant_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void mutant_fake_jump(edict_t *self);
void mutant_hit_left(edict_t *self);
void mutant_hit_right(edict_t *self);
void mutant_idle(edict_t *self);
void mutant_idle_loop(edict_t *self);
void mutant_jump(edict_t *self);
void mutant_jump_takeoff(edict_t *self);
void mutant_jump_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void mutant_melee(edict_t *self);
void mutant_pain(edict_t *self,edict_t *other,float kick,int damage);
void mutant_run(edict_t *self);
void mutant_search(edict_t *self);
void mutant_sight(edict_t *self,edict_t *other);
void mutant_stand(edict_t *self);
void mutant_step(edict_t *self);
void mutant_swing(edict_t *self);
void mutant_walk(edict_t *self);
void mutant_walk_loop(edict_t *self);
void muzzleflash_think(edict_t *flash);
void my_bprintf(int printlevel,char *fmt,...);
void old_teleporter_touch (edict_t *self, edict_t *other, cplane_t *plane, csurface_t *surf);
void other_FallingDamage(edict_t *ent);
void parasite_attack(edict_t *self);
void parasite_dead(edict_t *self);
void parasite_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void parasite_do_fidget(edict_t *self);
void parasite_drain_attack(edict_t *self);
void parasite_end_fidget(edict_t *self);
void parasite_idle(edict_t *self);
void parasite_jump(edict_t *self);
void parasite_launch(edict_t *self);
void parasite_pain(edict_t *self,edict_t *other,float kick,int damage);
void parasite_reel_in(edict_t *self);
void parasite_refidget(edict_t *self);
void parasite_run(edict_t *self);
void parasite_scratch(edict_t *self);
void parasite_search(edict_t *self);
void parasite_sight(edict_t *self,edict_t *other);
void parasite_stand(edict_t *self);
void parasite_start_run(edict_t *self);
void parasite_start_walk(edict_t *self);
void parasite_tap(edict_t *self);
void parasite_walk(edict_t *self);
void path_corner_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void path_track_use(edict_t *self,edict_t *other,edict_t *activator);
void pendulum_blocked(edict_t *self,edict_t *other);
void pendulum_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void pendulum_rotate(edict_t *self);
void pendulum_use(edict_t *self,edict_t *other,edict_t *activator);
void pivot_blocked(edict_t *self,edict_t *other);
void pivot_init(edict_t *ent);
void pivot_stop(edict_t *ent);
void pivot_touch(edict_t *ent,edict_t *other,cplane_t *plane,csurface_t *surf);
void plat_Accelerate(moveinfo_t *moveinfo);
void plat_CalcAcceleratedMove(moveinfo_t *moveinfo);
void plat_blocked(edict_t *self,edict_t *other);
void plat_go_down(edict_t *ent);
void plat_go_up(edict_t *ent);
void plat_hit_bottom(edict_t *ent);
void plat_hit_top(edict_t *ent);
void plat_spawn_inside_trigger(edict_t *ent);
void player_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void player_pain(edict_t *self,edict_t *other,float kick,int damage);
void point_combat_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void respawn(edict_t *self);
void rocket_delayed_start(edict_t *rocket);
void rocket_die (edict_t *self, edict_t *inflictor, edict_t *attacker, int damage, vec3_t point);
void rocket_explode (edict_t *ent);
void rocket_touch(edict_t *ent,edict_t *other,cplane_t *plane,csurface_t *surf);
void rotating_accel(edict_t *self);
void rotating_blocked(edict_t *self,edict_t *other);
void rotating_decel(edict_t *self);
void rotating_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void rotating_use(edict_t *self,edict_t *other,edict_t *activator);
void safe_bprintf(int printlevel,char *fmt,...);
void safe_centerprintf(edict_t *ent,char *fmt,...);
void safe_cprintf(edict_t *ent,int printlevel,char *fmt,...);
void set_child_movement(edict_t *self);
void soldier_attack(edict_t *self);
void soldier_attack1_refire1(edict_t *self);
void soldier_attack1_refire2(edict_t *self);
void soldier_attack2_refire1(edict_t *self);
void soldier_attack2_refire2(edict_t *self);
void soldier_attack3_refire(edict_t *self);
void soldier_attack6_refire(edict_t *self);
void soldier_cock(edict_t *self);
void soldier_dead(edict_t *self);
void soldier_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void soldier_dodge(edict_t *self,edict_t *attacker,float eta);
void soldier_duck_down(edict_t *self);
void soldier_duck_hold(edict_t *self);
void soldier_duck_up(edict_t *self);
void soldier_fire(edict_t *self,int flash_number);
void soldier_fire1(edict_t *self);
void soldier_fire2(edict_t *self);
void soldier_fire3(edict_t *self);
void soldier_fire4(edict_t *self);
void soldier_fire6(edict_t *self);
void soldier_fire7(edict_t *self);
void soldier_fire8(edict_t *self);
void soldier_idle(edict_t *self);
void soldier_jump(edict_t *self);
void soldier_pain(edict_t *self,edict_t *other,float kick,int damage);
void soldier_run(edict_t *self);
void soldier_sight(edict_t *self,edict_t *other);
void soldier_stand(edict_t *self);
void soldier_walk(edict_t *self);
void soldier_walk1_random(edict_t *self);
void spawn_precipitation(edict_t *self,vec3_t org,vec3_t dir,float speed);
void spectator_respawn(edict_t *ent);
void spline_calc(edict_t *train,vec3_t p1,vec3_t p2,vec3_t a1,vec3_t a2,float m,vec3_t p,vec3_t a);
void stuffcmd(edict_t *pent,char *pszCommand);
void supertankMachineGun(edict_t *self);
void supertankRocket(edict_t *self);
void supertank_attack(edict_t *self);
void supertank_dead(edict_t *self);
void supertank_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void supertank_forward(edict_t *self);
void supertank_pain(edict_t *self,edict_t *other,float kick,int damage);
void supertank_reattack1(edict_t *self);
void supertank_run(edict_t *self);
void supertank_search(edict_t *self);
void supertank_stand(edict_t *self);
void supertank_walk(edict_t *self);
void swimmonster_start(edict_t *self);
void swimmonster_start_go(edict_t *self);
void swinging_door_killed(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void swinging_door_reset(edict_t *self);
void tank_attack(edict_t *self);
void tank_dead(edict_t *self);
void tank_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void tank_doattack_rocket(edict_t *self);
void tank_footstep(edict_t *self);
void tank_idle(edict_t *self);
void tank_pain(edict_t *self,edict_t *other,float kick,int damage);
void tank_poststrike(edict_t *self);
void tank_reattack_blaster(edict_t *self);
void tank_refire_rocket(edict_t *self);
void tank_run(edict_t *self);
void tank_sight(edict_t *self,edict_t *other);
void tank_stand(edict_t *self);
void tank_thud(edict_t *self);
void tank_walk(edict_t *self);
void tank_windup(edict_t *self);
void target_actor_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void target_animate(edict_t *);
void target_animate(edict_t *ent);
void target_animation_use(edict_t *self,edict_t *other,edict_t *activator);
void target_attractor_think(edict_t *self);
void target_attractor_think_single(edict_t *self);
void target_blaster_init(edict_t *self);
void target_blaster_think(edict_t *self);
void target_clone_starton(edict_t *self);
void target_command_use(edict_t *self,edict_t *activator,edict_t *other);
void target_crosslevel_target_think(edict_t *self);
void target_earthquake_think(edict_t *self);
void target_earthquake_use(edict_t *self,edict_t *other,edict_t *activator);
void target_effect_at(edict_t *self,edict_t *activator);
void target_effect_explosion(edict_t *self,edict_t *activator);
void target_effect_lightning(edict_t *self,edict_t *activator);
void target_effect_sparks(edict_t *self,edict_t *activator);
void target_effect_splash(edict_t *self,edict_t *activator);
void target_effect_steam(edict_t *self,edict_t *activator);
void target_effect_think(edict_t *self);
void target_effect_trail(edict_t *self,edict_t *activator);
void target_effect_tunnel_sparks(edict_t *self,edict_t *activator);
void target_effect_use(edict_t *self,edict_t *other,edict_t *activator);
void target_effect_widowbeam(edict_t *self,edict_t *activator);
void target_explosion_explode(edict_t *self);
void target_failure_fade_lights(edict_t *self);
void target_failure_player_die(edict_t *player);
void target_failure_think(edict_t *self);
void target_failure_wipe(edict_t *self);
void target_fountain_delayed_use(edict_t *self);
void target_fountain_think(edict_t *self);
void target_fountain_use(edict_t *ent,edict_t *other,edict_t *activator);
void target_laser_off(edict_t *self);
void target_laser_on(edict_t *self);
void target_laser_ps_off(edict_t *self);
void target_laser_ps_on(edict_t *self);
void target_laser_ps_think(edict_t *self);
void target_laser_ps_use(edict_t *self,edict_t *other,edict_t *activator);
void target_laser_start(edict_t *self);
void target_laser_think(edict_t *self);
void target_laser_use(edict_t *self,edict_t *other,edict_t *activator);
void target_lightramp_think(edict_t *self);
void target_lightramp_use(edict_t *self,edict_t *other,edict_t *activator);
void target_lightswitch_toggle(edict_t *self);
void target_locator_init(edict_t *self);
void target_lock_use(edict_t *self,edict_t *other,edict_t *activator);
void target_monitor_move(edict_t *self);
void target_monitor_off(edict_t *self);
void target_precipitation_delayed_use(edict_t *self);
void target_precipitation_think(edict_t *self);
void target_precipitation_use(edict_t *ent,edict_t *other,edict_t *activator);
void target_string_use(edict_t *self,edict_t *other,edict_t *activator);
void teleport_transition_ents(edict_t *transition,edict_t *teleporter,edict_t *destination);
void teleporter_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void thing_grenade_boom(edict_t *self);
void thing_restore_leader(edict_t *self);
void thing_think(edict_t *self);
void thing_think_pause(edict_t *self);
void thing_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void toggle_target_blaster(edict_t *self,edict_t *other,edict_t *activator);
void toggle_turret_breach(edict_t *self,edict_t *other,edict_t *activator);
void touch_hint_path(edict_t *hintpath,edict_t *monster,cplane_t *plane,csurface_t *surf);
void touch_trigger_disguise(edict_t *trigger,edict_t *other,cplane_t *plane,csurface_t *surf);
void touch_trigger_switch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trackchange_done(edict_t *self);
void trackchange_use(edict_t *self,edict_t *other,edict_t *activator);
void tracktrain_blocked(edict_t *self,edict_t *other);
void tracktrain_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void tracktrain_disengage(edict_t *train);
void tracktrain_drive(edict_t *train,edict_t *other);
void tracktrain_hide(edict_t *self);
void tracktrain_next(edict_t *self);
void tracktrain_reach_dest(edict_t *self);
void tracktrain_think(edict_t *self);
void tracktrain_turn(edict_t *self);
void tracktrain_use(edict_t *self,edict_t *other,edict_t *activator);
void train_angles(edict_t *train);
void train_blocked(edict_t *self,edict_t *other);
void train_children_think(edict_t *self);
void train_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void train_next(edict_t *self);
void train_resume(edict_t *self);
void train_spline(edict_t *self);
void train_use(edict_t *self,edict_t *other,edict_t *activator);
void train_wait(edict_t *self);
void train_yaw(edict_t *self);
void trainbutton_done(edict_t *self);
void trainbutton_fire(edict_t *self);
void trainbutton_killed(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void trainbutton_return(edict_t *self);
void trainbutton_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trainbutton_use(edict_t *self,edict_t *other,edict_t *activator);
void trainbutton_wait(edict_t *self);
void trans_ent_filename(char *);
void trans_ent_filename(char *filename);
void tremor_trigger_enable(edict_t *self,edict_t *other,edict_t *activator);
void trigger_bbox_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void trigger_bbox_reset(edict_t *self);
void trigger_bbox_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trigger_bbox_use(edict_t *self,edict_t *other,edict_t *activator);
void trigger_counter_use(edict_t *self,edict_t *other,edict_t *activator);
void trigger_crosslevel_trigger_use(edict_t *self,edict_t *other,edict_t *activator);
void trigger_elevator_init(edict_t *self);
void trigger_elevator_use(edict_t *self,edict_t *other,edict_t *activator);
void trigger_enable(edict_t *self,edict_t *other,edict_t *activator);
void trigger_gravity_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trigger_inside_think(edict_t *self);
void trigger_key_use(edict_t *self,edict_t *other,edict_t *activator);
void trigger_look_disable(edict_t *self,edict_t *other,edict_t *activator);
void trigger_look_enable(edict_t *self,edict_t *other,edict_t *activator);
void trigger_look_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trigger_mass_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trigger_monsterjump_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trigger_push_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void trigger_relay_use(edict_t *self,edict_t *other,edict_t *activator);
void trigger_scales_think(edict_t *self);
void trigger_speaker_disable(edict_t *self,edict_t *other,edict_t *activator);
void trigger_speaker_enable(edict_t *self,edict_t *other,edict_t *activator);
void trigger_speaker_think(edict_t *self);
void trigger_switch(edict_t *ent);
void trigger_switch_delay(edict_t *ent);
void trigger_switch_usetargets(edict_t *ent,edict_t *activator);
void trigger_teleporter_use(edict_t *self,edict_t *other,edict_t *activator);
void turn_vehicle(edict_t *self);
void turret_base_finish(edict_t *self);
void turret_blocked(edict_t *self,edict_t *other);
void turret_breach_finish_init(edict_t *self);
void turret_breach_fire(edict_t *ent);
void turret_breach_fire(edict_t *self);
void turret_breach_think(edict_t *self);
void turret_breach_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void turret_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void turret_die_temp_think(edict_t *self);
void turret_disengage(edict_t *ent);
void turret_disengage(edict_t *self);
void turret_driver_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void turret_driver_link(edict_t *self);
void turret_driver_think(edict_t *self);
void turret_turn(edict_t *self);
void use_camera(edict_t *ent,edict_t *other,edict_t *activator);
void use_camera(edict_t *self,edict_t *other,edict_t *activator);
void use_func_reflect(edict_t *self,edict_t *other,edict_t *activator);
void use_killbox(edict_t *self,edict_t *other,edict_t *activator);
void use_target_CD(edict_t *self,edict_t *other,edict_t *activator);
void use_target_anger(edict_t *self,edict_t *other,edict_t *activator);
void use_target_attractor(edict_t *self,edict_t *other,edict_t *activator);
void use_target_blaster(edict_t *self,edict_t *other,edict_t *activator);
void use_target_change(edict_t *self,edict_t *other,edict_t *activator);
void use_target_changelevel(edict_t *self,edict_t *other,edict_t *activator);
void use_target_explosion(edict_t *self,edict_t *other,edict_t *activator);
void use_target_fade(edict_t *self,edict_t *other,edict_t *activator);
void use_target_failure(edict_t *self,edict_t *other,edict_t *activator);
void use_target_goal(edict_t *ent,edict_t *other,edict_t *activator);
void use_target_lightswitch(edict_t *self,edict_t *other,edict_t *activator);
void use_target_monitor(edict_t *self,edict_t *other,edict_t *activator);
void use_target_monsterbattle(edict_t *self,edict_t *other,edict_t *activator);
void use_target_movewith(edict_t *self,edict_t *other,edict_t *activator);
void use_target_rocks(edict_t *self,edict_t *other,edict_t *activator);
void use_target_rotation(edict_t *self,edict_t *other,edict_t *activator);
void use_target_secret(edict_t *ent,edict_t *other,edict_t *activator);
void use_target_set_effect(edict_t *self,edict_t *other,edict_t *activator);
void use_target_skill(edict_t *self,edict_t *other,edict_t *activator);
void use_target_sky(edict_t *self,edict_t *other,edict_t *activator);
void use_target_spawner(edict_t *self,edict_t *other,edict_t *activator);
void use_target_splash(edict_t *self,edict_t *other,edict_t *activator);
void use_teleporter(edict_t *self,edict_t *other,edict_t *activator);
void use_trigger_disguise(edict_t *trigger,edict_t *other,edict_t *activator);
void use_trigger_switch(edict_t *ent,edict_t *other,edict_t *activator);
void use_turret_base(edict_t *self,edict_t *other,edict_t *activator);
void use_turret_breach(edict_t *self,edict_t *other,edict_t *activator);
void vectoangles(vec3_t value1,vec3_t angles);
void vectoangles(vec3_t vec,vec3_t angles);
void vectoangles2(vec3_t value1,vec3_t angles);
void vectoangles2(vec3_t vec,vec3_t angles);
void vehicle_blocked(edict_t *self,edict_t *other);
void vehicle_disengage(edict_t *vehicle);
void vehicle_think(edict_t *self);
void vehicle_touch(edict_t *self,edict_t *other,cplane_t *plane,csurface_t *surf);
void viper_bomb_think(edict_t *self);
void viper_die(edict_t *self,edict_t *inflictor,edict_t *attacker,int damage,vec3_t point);
void walkmonster_start(edict_t *self);
void walkmonster_start_go(edict_t *self);
void weapon_bfg_fire(edict_t *ent,qboolean altfire);
void weapon_grenade_fire(edict_t *ent,qboolean held);
void weapon_grenadelauncher_fire(edict_t *ent,qboolean altfire);
void weapon_railgun_fire(edict_t *ent,qboolean altfire);
void weapon_shotgun_fire(edict_t *ent,qboolean altfire);
void weapon_supershotgun_fire(edict_t *ent,qboolean altfire);